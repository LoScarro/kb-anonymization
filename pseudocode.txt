
## Pseudocode Expanded

Input: 
R: Raw dataset
k: Level of anonymization
P: A subject program
O: Configuration option: P-T, P-F, or I-T.

Output: 
R': Anonymized dataset for release

Pseudocode:
Initialize R' as empty table

# ------------------------- The Program Execution module -------------------------

Initialize PC_Buckets, a dictionary which groups tuples based on path conditions, mapping PC to a list of tuples which have that PC

# fill PC_Buckets
For each t in R
  pc = execute P with t and collect the path condition 
  If PC_Buckets does not contains pc
    PC_Buckets[pc] = []
  PC_Buckets[pc].append(t)
  
For each Bucket with (key, value) = (pc, B)
  if len(B) < k:
    del PC_Bucket[pc]    
    output “Error: unsatisfiable case” and continue
 
# ------------------------- The k-anonymization module -------------------------
Initialize A, a dataset holding intermediate k-anonymized groups

For each Bucket with (key, value) = (pc, B)
  B' = Invoke a k-anonymization algorithm on B and get its result 
  remove duplicates in B'

  For each tuple b ∈ B'
    If O == "I-T":
      If len(b) <= 1 or no field in b contain concrete values
        Output “Error: unsatisfiable case”
        continue
    A.add({b, pc, B})
  
# ------------------------- The Constraint Generation module -------------------------

# Construct constraints for various configurations


For each {b, pc, B} in A:
  if O == "P-F":
    S = gen_constraints_PF(B)

  elif O == "P-T":
    S = gen_costraints_PT(B)
   
  elif O == "I-T":
    S = gen_costraints_IT(B, b)

  else: 
    Output “Error: unimplemented option”
    continue

  S = S U pc

  # ------------------------- The Constraint Solver module -------------------------

  # Invoke a constraint solver on S, and get its result r
  r = gen_new_tuple(S) # finds a tuple which satisfy constraints
  if a tuple r satisfy the constraints:
    R' = R' U {r}
    
Return R'


# ------------------------- gen_constraints_PF -------------------------

def gen_constraints_PF(B):
  # B is a set of raw tuples
  # S is the set of constraints  
  S = []

 for field in fields:
    for t in B:
      S.append(f"{field} != {t.field}")
  
  return S

# ------------------------- gen_constraints_PT -------------------------

def gen_constraints_PT(B):
  # B is a set of raw tuples
  # S is the set of constraints  
  S = []

  field = # take it randomly or take the first one in b

  for t in B:
    S.append(f"{field} != {t.field}")

  return S

# ------------------------- gen_constraints_IT -------------------------

def gen_constraints_IT(B, b):
  # B is a set of raw tuples
  # b is a tuple that may has gen values or '*'
  S = []
  field = None

  if B contains no generic value or '*':
    S = gen_constraints_PT(B)
    field = first field of B

  else:
    field = # first field in B containing a gen value or '*'
    for each t in B:
      S.append(f"{field} != {t.field}")
  
  # conc_field is the name of the column
  for each conc_field in b:
    if b[conc_field] is a concrete value and conc_field != field:
      S.append(f"{conc_field} != {b.conc_field}")

  return S

# ------------------------- The Constraint Solver -------------------------

# finds a tuple which satisfy constraints
def gen_new_tuple(S):
  # S is the set of constraints
  # r is the tuple that satisfies the constraints

  # Invoke a constraint solver on S, and get its result r
  # r = solve(S)

  return r